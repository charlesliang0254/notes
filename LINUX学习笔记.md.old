# 鸟哥的LINUX私房菜读书笔记



## 基础概念

计算机、计算机组成、RISC/CISC、x86/AMD、南北桥、外频倍频、总线宽度与字长

物理CPU、核心数、逻辑CPU、超线程

DRAM = Dynamic Random Access Memory
SRAM = Static Random Access Memory
SDRAM = Synchronous DRAM
DDR SDRAM = Double Date Rate SDRAM
ROM = Read Only Memory
flash
EEPROM = Electrically Erasable Programmable ROM

PCI=>AGP=>PCIe
D-sub、DVI、HDMI、DisplayPort

磁道、扇区、柱面
SATA、SAS、IDE、SCSI
USB、eSATA

POSIX：可移植操作系统接口

虚拟化技术：在一台物理主机上模拟多个逻辑上完全独立的硬件

Linux企鹅的名字——Tux

Linux内核版本：

- 奇偶版本：主次版本为奇数——开发中版本；主次版本为偶数——稳定版本
- 主线版本、长期维护版本

查看最新主线版本和长期维护版本：https://www.kernel.org/

## 主机规划与磁盘分区

LINUX中组件和设备都是以文件的形式存在的

|设备|文件名|
|---------------|:---------------|
|SCSI、SATA、USB硬盘驱动器 |/dev/sd[a-p]|
|U盘 |/dev/sd[a-p]|
|Virto接口 |/dev/vd[a-p]|
|软盘驱动器 |/dev/fd[0-7]|
|打印机 |/dev/lp[0-2]（25针打印机）<br/>/dev/usb/lp[0-15]（USB接口）|
|鼠标 |/dev/input/mouse[0-15]（通用）<br/>/dev/psaux（PS/2接口）<br/>/dev/mouse（当前鼠标）|
|CDROM、DVDROM |/dev/scd[0-1]（通用）<br/>/dev/sr[0-1]（通用,CENTOS比较常见）<br/>/dev/cdrom（当前CDROM）|
|磁带机 |/dev/ht0（IDE接口）<br/>/dev/st0（SATA/SCSI接口）<br/>/dev/tape（当前磁带）|
|IDE磁盘驱动器 |/dev/hd[a-d]（旧式系统才有）|

整块硬盘的第一个扇区最重要，存放主引导记录（MBR）、分区表、结束标志。

- MBR：可以安装启动引导程序的地方，有446B
- 分区表：记录整块硬盘分区状态，有64B，最多仅能有四组记录区，称为主分区或扩展分区。分区的作用是隔离数据和提升性能。
- 结束标志（55AA）

主分区、扩展分区、逻辑分区：

- 主分区：可直接使用，记录一个分区的信息，可以被格式化，可以用来安装操作系统
- 扩展分区：使用额外的扇区划分多个逻辑分区，不可直接使用，无法格式化
- 逻辑分区：由扩展分区划分的新的分区，可以被格式化

主分区和扩展分区之和不超过4，扩展分区最多只能有一个，逻辑分区的数量依操作系统而定，主分区的编号从1开始，逻辑分区的编号从5开始

GPT磁盘分区表：

- 因为已经存在4K扇区，所以使用逻辑区块地址（LBA）取代原有扇区概念
- 使用34个LBA块记录分区信息，LBA0为MBR兼容区块，LBA1为GPT表头记录LBA2-33为实际记录分区信息处

BIOS搭配MBR/GPT的启动流程：

- BIOS：启动主动执行的固件，识别第一个可启动的设备
- MBR：第一个可启动设备的第一个扇区内的主引导记录块，内含启动引导代码
- 启动引导程序（BootLoader）：一个可读取内核文件执行的软件
- 内核文件：开始启动操作系统

引导程序的作用：

- 提供不同的启动选项
- 加载内核文件
- 转交其它启动引导程序

每个分区都会有自己的启动分区，实际可启动的内核文件放在分区之中

引导程序只会识别自己系统分区内的可启动的内核文件以及其他启动引导程序

WIndows安装时会主动覆盖MBR和自己所在分区的启动扇区，Linux安装时可以设置将引导程序存放在MBR或者其他分区的启动扇区

UEFI：BIOS的替代方案

- 使用C语言编写
- 使用驱动程序和协议
- CPU保护模式
- 支持简化操作系统环境

目录树架构：以根目录为主，然后向下呈现为分支状的一种文件架构

挂载：利用一个目录当成进入点，将磁盘分区的数据放置在该目录下

## LINUX安装

## 首次登录与在线求助

linux命令：

```sh
command [-options] param1 param2
```

语言：

```sh
# 显示语言
locale

# 修改语言
LANG=en_US.utf8
export LC_ALL=en_US.utf8

# 修改默认的语系
vi /etc/locale.conf
```

显示日期的命令：

```sh
date                # 显示为Sat Aug 28 09:21:54 CST 2021
date +%Y-%m-%d      # 显示为2021-08-27格式的日期
date +%F            # 显示为2021-08-27格式的日期
date +%H:%M:%S      # 显示为09:00:00格式的时间
date +%T            # 显示为09:00:00格式的时间
```

显示日历的命令：

```sh
cal                 # 显示当月的日历
cal 2021			# 显示2021年的年历
cal 7 2021          # 显示2021年7月的日历
```

计算器：

```sh
bc                  # 进入计算器
quit                # 退出计算器
```

几个重要的热键：

```sh
TAB                    - 命令补全和文件补全
CTRL+C                 - 中断目前的程序
CTRL+D                 - 结束输入，EXIT
Shift+PageUp/PageDown  - 翻页
```

命令的帮助信息

- `--help`选项
- man页面
  - 注意代号1、5、8的含义，1-一般用户可用，5-配置文件或某些文件的格式，8-系统管理员可用
  - 按h查看热键
  - `man -f`/`whatis`
  - `man -k`/`apropos`
  - `man 数字`
- info页面
  - 拆分成页面的形式展示
  - 按h查看热键，n=next，p=previous
  - `*`表示菜单，可以按Enter跳转
- `usr/share/doc`

超简易的文本编辑器——nano

关机：

- `who` 查看登录的用户
- `netstat -a` 查看网络的联机状态
- `ps -aux` 查看后台运行的程序
- `sync` 数据同步写入磁盘
- 关机/重启命令：
  - `shutdown`：通知系统内的进程、通知系统中的一些服务关闭，支持设置关机时间和关机信息，建议使用
  - `reboot`、`halt`、`poweroff`：调用`sync`然后关机，不会通知进程和服务关闭，不建议使用
  - `systemctl`：其他命令关机都会调用`systemctl`
  - `init`

```sh
shutdown -H                   # 停机
shutdown -P                   # 停机并且掉电
shutdown -h                   # 等同于-P，除非指定--halt
shutdown -r                   # 重启
shutdown -k                   # 不关机/重启，发送消息给登录用户
shutdown -c                   # 取消关机/重启
shutdown -h 10 '十分钟后停机'   # 设置关机时间和关机信息

systemctl halt                # 停机
systemctl poweroff            # 停机&掉电
systemctl reboot              # 重启
systemctl suspend             # 挂起
```

## 文件权限与目录配置

用户、用户组、其他人、root

用户信息：`/etc/passwd`

用户口令：`/etc/shadow`

用户组信息：`/etc/group`

查看文件：即查看目录文件的内容

```sh
ls                # 查看文件名
ls -l             # 查看文件详细信息
ls -a             # 显示所有隐藏文件
ls -d             # 查看目录文件本身而不是它的内容
ls -hl            # 文件大小适合人类阅读方式表示
ls -Rl			  # 递归查看目录文件内容
ls -l --full-time # 展示完整的时间

-rwxr-xr-x.   1      root     root        8968          Aug 28 12:21  a.out
文件的类型与权限 链接数  文件拥有者 文件所属用户组 文件大小（字节） 文件最后修改时间  文件名

文件的类型与权限：
第1位：d 目录 - 文件 l 链接文件 b 可按块随机读写设备 c 串行端口设备 s Socket文件 p 管道文件
第2-4位：文件拥有者具备的权限，依次为rwx，表示可读、可写、可执行,-表示不具有该项权限
第5-7位：文件所属用户组的权限，依次为rwx，表示可读、可写、可执行,-表示不具有该项权限
第8-10位：其他人的权限，依次为rwx，表示可读、可写、可执行,-表示不具有该项权限

如果文件名是以 . 开头的，那么这个文件就是一个隐藏文件
```

修改文件权限与属性：

- `chgrp`：修改文件所属用户组
- `chown`：修改文件拥有者
- `chmod`：修改文件的权限，SUID、SGID、SBIT等特性

```sh
chgrp [-R] GROUPNAME DIRNAME/FILE...        # 修改文件所属用户组，-R表示递归修改
chown [-R] USERNAME:GROUPNAME DIR/FILE...   # 修改文件拥有者和文件所属用户组
chown [-R] USERNAME DIR/FILE...            	# 修改文件拥有者
chmod [-R] OCTAL-MODE DIR/FILE...           # 修改文件权限
chmod [-R] MODE... DIR/FILE...              # 修改文件权限

# OCTAL-MODE: 
#     r=4 w=2 x=1 rwxr-xr-x=755 rw-r--r--=644
# MODE:
#     u=文件拥有者 g=文件所属用户组 o=其他人 a=所有人u+g+o
#     +（加入） -（移除） =（设置）
#     r w x
#
#     u+rwx 给文件拥有者添加读写执行权限 
#     g-x 移除用户组的执行权限 
#     o=r 其他人的权限黄设置为只读 
#     a+r 给所有人添加只读权限
```

文件的权限意义：

- 对于文件：r=可读 w=可写 x=可执行
- 对于目录：r=可读（查看目录中的文件列表） w=可写（增加和删除已有文件与目录，移动=删除+新增）x=能否进入或成为工作目录
- 一般对于目录来说，x权限>r权限，一般同时出现

Linux文件种类与扩展名：

- 常规文件
  - 纯文本文件：用户可以直接阅读的文件，可以使用`cat`命令查看文件内容
  - 二进制文件：操作系统可以直接执行的文件，用户无法阅读
  - 数据文件：具有特定格式的文件，能够使用`last`命令读出来，不能使用`cat`命令读出来
- 目录
- 链接文件：指的是软链接文件，相当于Wiindows操作系统中的快捷方式
- 设备与设备文件：与系统周边及存储相关的一些文件
  - 区块设备文件：表示块设备，以块为单位传输数据，传输数据的效率高
  - 字符设备文件：表示一些串行端口的接口设备，以字符为单位传输数据，传输数据的效率低
- 数据接口文件（sockets）：通常被用来在网络上交换数据
- 数据输送文件（FIFO，pipe）：管道文件

Linux文件扩展名只具有语义上的含义，对于操作系统没有任何含义。

Linux单一文件名上限是255字节，应当避免在文件名中使用特殊符号。

Linux目录配置的依据——FHS：

- 目录的四种交互状态：可分享/不可分享 x 不变的/可变的

  - 可分享：可以分享给其它系统挂载的目录
  - 不可分享：自己机器上面运行的设备文件或是与程序相关的socket文件等，不可分享给其他机器
  - 不变：有些数据不会经常发生变动，例如函数库、文件说明、系统管理员所管理的主机服务配置文件等
  - 可变动：经常修改的数据，如日志文件、一般用户可自行接收的新闻组等

|                    | 可分享（shareable）       | 不可分享（unshareable） |
| ------------------ | ------------------------- | ----------------------- |
| 不变（static）     | /usr（软件存放处）        | /etc（配置文件）        |
|                    | /opt（第三方辅助文件）    | /boot（启动与内核文件） |
| 可变动（variable） | /var/mail（用户邮箱）     | /var/run（程序相关）    |
|                    | /var/spool/news（新闻组） | /var/lock（程序相关）   |


- / （根目录，与启动系统有关） /usr（与软件安装、执行有关） /var（与系统运行过程有关）
- FHS建议根目录所在分区越小越好，应用程序所安装的软件不应和根目录在同一个分区中
- FHS定义 / （根目录）下应该有以下目录才好

| 目录                                | 应放置文件内容                                               |
| ----------------------------------- | ------------------------------------------------------------ |
| **第一部分：FHS要求必须存在的目录** |                                                              |
| `/bin`                              | 在单人维护模式下还能够被使用的命令                           |
| `/boot`                             | 启动过程中会使用到的文件                                     |
| `/dev`                              | 设备文件                                                     |
| `/etc`                              | 系统主要的配置文件放在这个目录<br/>`/etc/opt`（必要）：/opt中的第三方辅助软件的配置文件放在这里<br/>`/etc/x11`（建议）：X Window相关的配置文件放在这里<br/>`/etc/sgml`（建议）：与SGML格式有关的各项配置文件<br/>`/etc/xml`（建议）：与XML格式有关的各项配置文件 |
| `/lib`                              | 启动时以及在`/bin`或`/sbin`下面的命令会调用的函数库<br>`/lib/modules/`：可抽换式的内核相关模块（驱动程序） |
| `/media`                            | 可删除的设备，包括软盘、光盘、U盘等                          |
| `/mnt`                              | 暂时挂载某些额外的设备                                       |
| `/opt`                              | 第三方辅助软件放置的目录                                     |
| `/run`                              | 系统启动后产生的各项信息                                     |
| `/sbin`                             | root用户用来配置系统环境，启动、修复、还原系统所需要的命令   |
| `/srv`                              | 一些网络服务启动之后所需要的一些数据存放的位置               |
| `/tmp`                              | 临时文件存放位置                                             |
| `/usr`                              | Unix Software Resource，操作系统软件资源                     |
| `/var`                              | 运行时才会慢慢占用的目录，主要存放缓存、日志以及某些软件运行后产生的文件，包括程序文件（lock file、run file）、MySQL数据库文件等等 |
| **第二部分：FHS建议可以存在的目录** |                                                              |
| `/home`                             | 系统默认的用户家目录，`~`表示当前用户的家目录，`~liming`表示用户liming的家目录 |
| `/lib<qual>`                        | 用来存放与/lib不同格式的二进制函数库                         |
| /root                               | 系统管理员的家目录                                           |

Linux中几个常见的目录：

| 目录        | 应放置的文件内容                                             |
| ----------- | ------------------------------------------------------------ |
| /lost+found | 使用标准的ext2、ext3、ext4文件系统格式才会产生的一个目录，目的在于当文件系统发生错误时，将一些遗失的片段放置到这个目录下 |
| /proc       | 这个目录本身是一个虚拟文件文件系统（virtual filesystem），它放置的数据都是在内存中的，例如系统内核、进程信息（process）、外接设备的状态及网络状态等。因为这个目录下的数据都是在内存当中，所以本身不占任何硬盘空间。比较重要的文件如：/proc/cpuinfo、/proc/dma、/proc/ioports、/proc/net/*等 |
| /sys        | 这个目录同样是一个虚拟文件系统（virtual filesystem）主要用来记录内核与系统硬件信息相关的内容。包括目前已加载的内核模块与内核检测到的硬件设备信息等，这个目录同样不占硬盘空间 |

 注意在CENTOS7.x中`/sbin`、`/bin`、`/lib`已经被移动到了/usr下面



/usr的意义与内容：

usr = Unix Software Resource，操作系统软件资源，/usr的子目录建议有以下内容

| 目录                                | 应放置文件内容                                               |
| ----------------------------------- | ------------------------------------------------------------ |
| **第一部分：FHS要求必须存在的目录** |                                                              |
| `/usr/bin`                          | 一般用户能够使用的命令都放在这里，CentOS已经将全部的命令都放在这里，/usr/bin目录下不应该再有子目录 |
| `/usr/lib`                          | 与lib的功能相同，所以/lib目录也会链接于此                    |
| `/usr/local`                        | 系统管理员在本机安装自己下载的软件（非发行版默认提供者），建议安装到此目录，这样会比较便于管理 |
| `/usr/sbin`                         | 非系统正常运行所需要的系统命令，最常见的就是某些网络服务器软件中的服务命令（daemon），基本功能与/sbin差不多，因此目前/sbin目录也是链接到该目录的 |
| `/usr/share`                        | 主要防止只读的数据文件，当然也包括共享文件，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据，因为几乎都是文本文件。在此目录下常见的还有这些子目录：<br>- /usr/share/man：在线帮助文档<br>- /usr/share/doc：软件说明文档<br>- /usr/share/zoneinfo：与时区有关的时区文件 |
| **第二部分：FHS建议可以存在的目录** |                                                              |
| `/usr/games`                        | 与游戏比较相关的数据放置处                                   |
| `/usr/include`                      | c/c++等程序语言的头文件与包含文件存放位置，当我们以Tarball方式（*.tar.gz的方式安装软件）安装某些应用程序时，会使用到里面的很多文件 |
| `/usr/libexec`                      | 某些不被一般用户使用的执行文件或脚本等，到会放置在此目录中   |
| `/usr/lib<qual>`                    | 与`/lib<qual>`功能相同，目前`/lib<qual>`就是链接到此目录     |
| `/usr/src`                          | 一般源代码建议放置的位置，内核源代码则建议放置在/usr/src/Linux目录下 |



/var意义与内容：

在系统运行后逐渐占用硬盘的文件的目录，包括缓存、日志文件及某些软件运行时产生的文件，包括程序文件（lock file、run file），或例如MySQL数据库的文件等。常见的子目录有

| 目录                                | 应放置的文件内容                                    |
| ----------------------------------- | --------------------------------------------------- |
| **第一部分：FHS要求必须存在的目录** |                                                     |
| `/var/cache`                        | 应用程序缓存                                        |
| `/var/lib`                          | 程序使用的数据文件的存放位置                        |
| `/var/lock`                         | 设备锁文件，用于控制设备的并发访问                  |
| `/var/log`                          | 日志文件存放的位置                                  |
| `/var/mail`                         | 个人电子邮箱目录                                    |
| `/var/run`                          | 某些程序或服务启动后，会将他们的PID放置在这个目录下 |
| `/var/spool`                        | 放置一些队列数据                                    |



Centos发行版的目录：

- 网络设置数据放在 `/etc/sysconfig/network-scripts`
- 个别目录的位置调整：

```sh
/bin => /usr/bin
/sbin => /usr/sbin
/lib => /usr/lib
/lib64 => /usr/lib64
/var/lock => /run/lock
/var/run => /run
```



目录树：linux中所有文件和目录构成的树形结构

- 目录树的根节点是 `/`
- 支持本地分区的树形结构，也可以使用网络上的文件系统。CPU和内存只关心逻辑上的文件系统，不关心文件到底是存在哪里的。
- 每一个文件的全路径名在整个目录树中都是唯一的

## 文件和目录管理

### 目录和路径

绝对路径和相对路径：

- 绝对路径：目录树中以根目录开始的路径
- 相对路径：目录树中以目前路径是相对路径
  - `.` 或 `./`代表当前的目录
  - `..`或`../`代表当前目录的双亲目录

特殊的目录：`. .. - ~ ~USERNAME`

切换目录

```sh
cd
```

显示当前目录

```sh
pwd      # 显示当前路径
pwd -P   # 显示真正的路径，而不是使用链接的路径
```

建立新目录

```sh
mkdir DIR          # 建立新目录
mkdir -p DIR       # 建立路径上没有的所有目录
mkdir -m MODE DIR  # 建立新目录并且设置目录的权限，注意MODE是类似于755这种，不是rwx这种
mkdir -mp MODE DIR # 建立路径上没有的所有目录并设置权限
```

删除“空”的目录

```sh
rmdir DIR           # 删除“空”的目录
rmdir -p DIR        # 删除路径上“空”的目录
```

环境变量PATH：有很多目录，用冒号分隔，执行命令时会先去PATH中检索；不同用户的PATH也是不同的；不建议在PATH中加入`.`

修改PATH：

```sh
PATH="${PATH}:某个目录"
```

### 文件与目录管理

`ls` ：文件和目录查看

常用的选项：

```
-a  全部的文件（包括隐藏文件）
-A  除 . 和 .. 外全部的文件（包括隐藏文件）
-d  列举目录本身
-h  将文件大小以易读方式展示
-i  列出inode号码
-R  递归查看目录
-S  以文件容量大小排序而不是文件名
-t  以时间排序而不是文件名
--full-time  以完整时间模式输出
--time=atime|ctime  输出access时间或改变权限属性时间
```

cp、rm、mv：复制、删除、移动

常用的选项：

```
cp - 复制文件
	cp [OPTION]... SOURCE... DIRECTORY

    -i  interactive 交互模式，覆盖前会先询问
    -f  force 强制赋值，覆盖时不会询问
    -r  递归复制
    -d  如果复制的源文件是链接文件，那么复制链接文件的属性而不是实际指向的文件
    -l  建立硬链接而不是复制文件
    -s  建立符号链接（软链接）而不是复制文件
    -a  相当于 -dr --preserve=all
    -p  连同文件的属性‘属主、时间戳一起复制过去，相当于 --preserve=mode,ownership,timestamps
    --preserve[=ATTR_LIST]  连同指定的属性一起复制，默认为mode、ownership、timestamps，其他的属性还包括 context、links、xattr、all

rm - 删除文件
	rm [OPTION]... FILE...

    -f  强制删除
    -i  交互模式，删除前会询问
    -r  递归删除（常用于目录的删除，使用起来比较危险）
    -d  删除空的目录

mv - 移动文件
    mv [OPTION]... SOURCE... DIRECTORY

    -f  强制移动文件，会覆盖目标文件
    -i  interactive交互模式，覆盖前会先询问
    -u  源文件比目标文件新时才会覆盖

```

注意：

- 复制权限时，如果当前用户本身的权限不足，那么即使加上了`-a`也不会起作用



basename：获取路径的文件名

dirname：获取路径的目录名



### 文件内容的查看

cat、tac、nl：直接查看文件的内容

```
cat - 显示文件的内容
	cat [OPTION]... [FILE]...

    -A  相当于 -vET
    -v  列出一些看不出来的特殊字符
    -E  将结尾的换行符显示出来
    -T  将TAB键以^I显示出来
    -n  显示行号
    -b  显示行号，但空行不列出行号

	cat -  显示标准输入的内容

tac - 反向显示文件的内容
	tac [OPTION]... [FILE]...

nl - 添加行号打印
	nl [OPTION]... [FILE]...

	-b  指定行号指定的方式
		-b a  不论是否为空行都指定行号，相当于cat -n
		-b t  空行不列出行号，相当于cat -b
	-n  指定行号的显示方式
		-n ln 行号居左显示
		-n rn 行号居右显示（默认）
		-n rz 行号居右显示，且左侧补零
	-w  行号栏位宽度
```

more、less：可翻页查看

```
more常见命令：
	h          帮助信息
	<space>    下一页
	<enter>    下一行
	/STRING    查询字符串
	:f         显示文件名和行数
	q          退出
	b ctrl+b   往回翻页
	
less常见命令：
	h          帮助信息
	q          退出
	e j        下一行
	y k        上一行
	f <space>  下一页
	b          上一页
	/PATTERN   向后搜索
	?PATTERN   向前搜索
	n          搜索下一条
	N          搜索上一条
	g          回到开始
	G          到达结尾
```

head、tail：数据截取

```
head - 取出前面几行
	head [OPTION]... [FILE]...
	
	-n  从头截取的行数
	-c  从头截取的字符数
	-q  始终不打印文件名信息
	-v  始终打印文件名信息
	
tail - 取出后面几行
	-n  从末尾截取的行数
	-f  表示持续刷新后面所接文件中的内容，直到ctrl+c退出
	-q  始终不打印文件名信息
	-v  始终打印文件名信息
	
截取文件的第11到20行
cat -n /etc/man_db.conf | head -n 20 | tail -n 10
```

od：显示非纯文本文件的内容

```

od [-t TYPE] FILE

-t  输出类型，TYPE可选值如下
    a		使用默认的字符来显示输出
    c		使用ascii字符来显示输出
    d[SIZE] 使用十进制数输出，每个整数占用SIZE个字节
    f[SIZE] 使用浮点数输出，每个浮点数占用SIZE个字节
    o[SIZE] 使用八进制输出，每个八进制数占用SIZE个字节
    u[SIZE] 无符号数，每个无符号数占SIZE个字节
    x[SIZE] 使用十六进制输出，每个十六进制数占用SIZE个字节

    SIZE是一个数，如果TYPE的值为doux，那么SIZE还可以是
        C sizeof(char)
        S sizeof(short)
        I sizeof(int)
        L sizeof(long)
    如果TYPE是f，SIZE还可以是
        F sizeof(float)
        D sizeof(double)
        L sizeof(long double)
```

touch：修改文件时间或者创建新文件

> 文件的三个时间：
>
> - 修改时间（modification time, mtime）：当文件内容而非文件属性变化时，mtime更新
> - 状态时间（status time, ctime）：当文件的状态改变了就会更新这个时间，例如权限和属性变化了
> - 读取时间（access time, atime）：当文件内容被读取时就会更新这个时间

```
touch [OPTION]... FILE...
-a  只修改atime
-m  只修改mtime
-t  指定要修改为的时间，格式为[YYYYMMDDhhmm[.ss]]
-c  仅修改时间，不创建文件
-d  指定要修改为的日期，支持人类易读的日期格式，如：
Sun, 29 Feb 2004 16:21:42 -0800
2004-02-29 16:21:42
next Thursday
```

### 文件的默认权限与隐藏权限

umask：查看和设置文件的默认权限

```sh
umask                  # 以八进制数形式查看文件权限
umask -S               # 以符号形式查看文件权限
umask 0022             # 以八进制数形式设置权限
umask u=rwx,g=rx,o=rx  # 以符号形式设置权限

文件权限 = 666 & !umask值
目录权限 = 777 & !umask值
（&表示按位与，!表示按位取反）
```

> 文件隐藏属性的支持程度因文件系统而异，不同的文件系统对隐藏权限的支持程度也是不同的
>
> 使用man命令查看各个文件系统对隐藏权限的支持情况再使用
>
> `man -5 btrfs`
>
> `man -5 ext`
>
> `man -5 xfs`

chattr：设置文件隐藏属性

lsattr：查看文件隐藏属性

文件特殊权限：SUID、SGID、SBIT

- Set SUID：

  - 使用：标志为`s`，出现在文件拥有者的`x`权限位上；对应的八进制码值为4

  - 功能：具有某个程序的`x`权限的用户在该程序运行过程中借用程序属主的权限。

    例如，`sudo`命令能够使用root用户权限执行一些操作就是使用了SUID权限。

  - 条件：

    - 二进制文件有效；
    - 执行者拥有`x`权限；
    - 仅在该程序执行过程中有效；
    - 借用程序的属主的权限

- Set GUID

  - 标志为`s`，出现在文件所属用户组的`x`权限位置上；对应的八进制码值为2

  - 作用在文件上：具有某个程序的<code>x</code>权限的用户在该程序运行过程中借用程序所属用户组的权限。

  - 作用在目录上：具有某个程序的`x`权限的用户如果具有`r`和`x`权限可进入该目录，用户在此目录下的有效用户组会变成该目录的用户组，若用户在此目录下具有`w`的权限（可新建文件）则用户所建立的新文件所属用户组与此目录的用户组相同

  - 条件：

    - 二进制文件和目录有效
    - 执行者拥有`x`权限；
    - 如果是二进制文件，仅在该程序执行过程中有效；
    - 借用程序所属用户组的权限

    > 初始用户组：/etc/passwd文件中用户所在行的第4个字段记录的就是初始用户组
    >
    > 有效用户组：用户当前所具有的用户组就是有效用户组
    >
    > 使用groups命令可以查看用户的有效用户组

- Sticky Bit

  - 标志为`t`，出现在其他人的`x`权限位置上；对应的八进制码值为1
  - 作用：这个属性加在目录上之后，只有文件创建者和root才能删除、更名、移动文件；加在普通文件上没有效果

```sh
# 使用八进制数值设置权限
chmod 4755 start1.sh		# 添加SUID权限，SUID只能用在文件上
chmod 2755 start2.sh		# 添加GUID权限，用在文件上
chmod 2755 dir1				# 添加GUID权限，用在目录上
chmod 1755 dir2				# 添加SBIT权限，SBIT权限只能用在目录上

# 使用符号添加权限
chmod u+s start1.sh			# 添加SUID权限，SUID只能用在文件上
chmod g+s start2.sh			# 添加GUID权限，用在文件上
chmod g+s dir1				# 添加GUID权限，用在目录上
chmod o+t dir2				# 添加SBIT权限，SBIT只能用在目录上
```

注意：如果没有给设置SUID、GUID、SBIT权限的目录/文件设置`x`，那么这些属性就不会起作用，会显示成大写的`S`和`T`



file：观察文件类型

file命令会测试每一个参数以辨别文件的类型，共有三种测试，按照**文件系统测试**、**magic测试**和**语言测试**的顺序执行。首个通过的测试决定了输出的文件类型。被打印出来的文件类型通常会包含`text`、`executable`、`data`关键字之一，分别表示这是一个文本文件、可执行文件或数据文件。

- **text**：只包含可打印字符和一些常见的控制字符，并且可以在一个ASCII终端上尽可能安全地被读取
- **executable**：文件中包含具备Unix或者其他内核可识别格式的程序编译结果
- **data**：具有其他含义的二进制数据（数据通常是二进制且不可打印的）
- 例外情况是一些熟知的包含二进制数据的文件格式（core文件、tar压缩文件）

> 注意：当修改magic文件或者程序本身时，请确保保留这些关键字。用户依赖于知道目录中所有的可阅读文本都有”text“关键字。

三种文件类型测试：

- 文件系统测试：基于`stat`系统调用的结果。程序会检查文件是否为空，或者是否是某些特殊文件的排序。如果在系统头文件中定义了适合当前正在运行系统的文件类型（sockets、symbolic links、FIFOs），那么它们就会直觉地被知晓。
- Magic测试：检查有没有固定格式的标志性数据。例如，`a.out`文件的格式就被定义在标准库的几个头文件中。这些文件中会在特定的位置定义魔法数字，一般位于文件的开始位置，告知操作系统这是一个二进制可执行文件并由此获知是哪一种文件类型。magic的概念已经用来对数据文件类型进行扩展，任何文件在固定偏移量的位置如果有这样的magic值，就能够使用这种方式来描述它的类型。识别这些文件类型的magic值的信息在/usr/share/misc/magic.mgc文件中，如果这种编译好的文件不存在，那就去/usr/share/misc/magic/目录下找。如果你的家目录下存在.magic.mgc文件或者.magic目录，那使用的就是你这个magic文件。
- 语言测试：如果文件系统测试和Magic测试都没有通过，文件会被测试是否为一个文本文件，程序会使用各种类型的字符集尝试匹配文件的内容。根据文件匹配的字符集的不同，文件会被认定为"text"或者”character data“。除此之外，如果文件中使用了不同于LF的行结束符，程序也会进行报告；内置的转义序列也会被报告。一旦，文件被认为是一个文本文件，则会进行语言测试，根据`<names.h>`中定义的特殊关键字判断文件属于哪一种语言的源代码。



### 命令与文件的查找

which：查找执行文件，只会查找PATH路径下的可执行文件，不能查找bash内置的命令。

```
-a  查询全部
```

whereis：由一些特定的目录中查找文件

```
-l  列出whereis命令查找的几个目录
-b  查询二进制文件
-m  只找在说明文件manual路径下的文件
-s  只找source源文件
-u  查找不在上述三类项目中的其他特殊文件
```

locate：从数据库中查询文件名，默认每天更新一次数据库。

- 数据库存放的位置：`/var/lib/mlocate`
- 配置文件：`/etc/updatedb.conf`
- 手动更新数据库：`updatedb`

```
-l  限制查询结果的条数
-c  不输出结果，输出结果的条数
-A  匹配所有模式
-b  只匹配文件名，不包括文件名前面的路径
-w  匹配全路径名
-e  保证查询的结果都是存在的
-i  忽略大小写
```

find：直接读取目录树，查找文件名

```
1.与时间有关的选项 -atime -ctime -mtime，以 -atime为例：
-mtime n  		n天之前这一天被修改过内容的文件
-mtime +n 		n天之前（不包括n天本身）被修改内容的文件
-mtime -n 		n天之内（包括n天本身）被修改内容的文件
-newer file		比指定文件更新的文件

2.与使用者和用户组名称有关的参数：
-uid UID			查询与指定用户ID有关的文件
-gid GID			查询与指定用户组ID有关的文件
-user USERNAME		查询与指定用户名有关的文件
-group GROUPNAME	查询与指定用户组名有关的文件
-nouser				查询无主文件
-nogroup			查询无用户组文件

3.与文件属性相关的参数
-name FILENAME		查询指定文件名的文件
-size [+-]SIZE		查询指定大小的文件
						+表示比SIZE大，-表示比SIZE小
						SIZE可以携带单位：c 字节 k 千字节
-type TYPE			查询指定类型的文件，
						f 普通文件 
						b和c 设备文件 
						d 目录 
						l 链接文件 
						s socket文件 
						p FIFO文件
-perm MODE			查询权限等于MODE的文件
-perm -MODE			查询权限包含MODE的文件
-perm /MODE			查询文件权限包含任一MODE的文件

4.额外可以执行的操作
-exec COMMAND		额外的命令可以处理查询到的结果
-print				将结果打印到屏幕上，这是默认的操作
```

## linux磁盘与文件系统管理

### 文件系统

文件的实际内容存放在数据区块，文件属性存放在inode节点，此外还有超级区块记录整个文件系统的整体信息（如inode与数据区块的总量、使用量、剩余量）

索引式文件系统：在inode节点中记录全部数据区块的位置，与之相对的是FAT这种顺序存取的文件系统

文件系统一开始就会规划好inode与数据区块，除非重新格式化或使用resize2fs命令，一般不变。

区块群组：linux ext2文件系统区分多个区块群组，每个区块群组拥有独立的inode、数据区块、超级区块系统

- 数据区块：放置数据，ext2中支持1K、2K、4K数据区块，不同数据区块支持的最大单一文件大小和最大文件系统总容量也不同。原则上区块的大小与数量在格式化完成后不能再修改；每个区块中最多只能放置一个文件的数据；一个文件可能占用多个数据区块；文件小于区块时会产生内碎片
- inode表：记录文件的读写属性、文件属主与用户组、文件大小、ctime&atime&mtime、定义文件特性的标识、该文件真正内容的指向。每个inode固定大小为128B或256B，每个文件只会占用1个inode，文件系统能够建立文件的数量与inode节点个数相关，读取文件先找到inode并校验访问权限。
  - 一个inode表中有1个文件属性记录区域、12个直接指向、1个间接指向、1个双间接指向、1个三间接指向
  - 直接指向：直接记录一个数据区块的编号，12x1K=12K
  - 间接指向：使用额外的一个区块记录数据区块的编号，一个1K的数据区块可以记录256个区块编号，256x1K=256K
  - 双间接指向：第一层区块指向第二层区块，第二层区块指向数据区块，总共256x256x1K=64M
  - 三间接指向：第一层区块指向第二层区块，第二层区块指向第三层区块，总共256x256x256x1K=16G
- 超级区块：记录数据区块与inode的总量、未使用与已使用的inode与数据区块的数量、数据区块与inode的大小、文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘（fsck）的时间、有效位（表示当前文件系统是否已经挂载）。一个文件系统应该只有一个超级区块，后续区块群组中的超级区块主要用作备份
- 文件系统描述说明：描述每个区块群组的开始与结束位置，说明每个区块（超级区块、对照表、inode对照表、数据区块）分别介于哪一个区块之间
- 区块对照表：记录每一个区块是否为空
- inode对照表：记录每一个inode是否使用
- dumpe2fs：查询ext系列超级区块信息的命令

目录：创建目录时，文件系统会分配一个inode和至少一个区块。inode记录目录文件属性，区块记录文件名与文件名占用的inode号码。

文件：创建一般文件时，文件系统分配一个inode和若干区块

目录树：inode本身不记录文件名，文件名的记录是在目录的区块中

ext2/ext3/ext4文件的存取与日志式文件系统的功能

新建文件的操作：

1、校验用户读写目录的权限

2、查找未使用inode节点，写入新文件的属性

3、查找未使用的区块，写入数据，更新inode的区块指向数据

4、将刚刚写入的inode与区块数据同步更新inode对照表与区块对照表，并更新超级区块的内容

日志式文件系统：

为了避免文件系统不一致的情况发生，在文件系统中规划出一个区块专门用来记录读写文件时的步骤

 Linux文件系统的运行

当系统加载一个文件到内存后，如果该文件没有被修改过，则在内存区段文件数据会被设置为CLEAN；如果内存中的文件数据被更改过了，此时内存中的数据会被设置为DIRTY。系统会不定时地将内存中标记为DIRTY的数据写入硬盘中

常用文件会被加载入内存缓冲区，可以手动使用syn将内存中的数据回写入磁盘，正常关机时会调用sync命令，不正常关机时会导致数据尚未回写，重启后将花费时间进行磁盘校验，甚至导致文件系统损坏。

挂载：文件系统与目录树的结合操作称之为挂载。挂载点一定是目录，该目录是进入文件系统的入口

传统文件系统、日志式文件系统、网络文件系统

查看linux支持的文件系统：

```sh
ls -l /lib/modules/$(uname -r)/kernel/fs
```

系统目前已经加载到内存中支持的文件系统

```sh
cat /proc/filesystems
```

VFS：Virtual Filesystem Switch，Linux内核功能，用来读取文件系统



XFS文件系统：

日志式文件系统

主要规划为三个部分：数据区、文件系统活动登录区、实时运行区

- 数据区（data section）：分为多个存储区群组，每个存储区群组包含超级区块、inode、数据区块以及剩余空间的管理机制。与ext的区别在于，区块与inode有多种不同的容量可供设置，inode与区块是动态产生的，并不是格式化后就固定下来的
- 文件系统活动登录区（log section）：记录文件系统的变化，类似于ext2的日志区
- 实时运行区（realtime section）：建立文件时，在该区段找若干extent区块，放置文件；分配完毕后，再写入到data section的inode与区块中。

使用xfs_info命令可以观察xfs超级区块中的内容：

```txt
第1行		isize	inode的数量	agcount	存储区群组的个数	agsize	每个存储区群组的区块数
第2行		sectsz	逻辑扇区的容量
第4行		bsize	区块的容量	blocks	区块的数量
第5行		sunit	swidth	与磁盘阵列的stripe相关性较高
第7行		log = internal	表示登录区的位置在文件系统内，而不是在外部设备中
第9行		extsz	realtime区域中extent的容量
```

### 文件系统简单操作

df：列出文件系统整体磁盘使用量

```txt

-a	列出所有的文件系统，包括系统特有的/proc等文件系统
-k	以KB单位显示文件系统容量
-m	以MB单位显示文件系统容量
-h	以人类易读方式显示文件系统容量
-H	使用1000进制替换1024进制
-T	连同硬盘分区的文件系统名称也列出
-i	不用磁盘容量，而以inode的数量来显示

输出结果列：
Filesystem	代表该文件系统是在哪个硬盘分区，所以列出设备名称
1k-blocks	说明下面的数字单位是1K，可以使用-h -m来改变容量单位
Used		已使用存储空间
Available	剩余存储空间
Use%		磁盘使用百分比
Mounted on	磁盘挂载点

/proc目录是挂载在内存当中的，不占据磁盘的存储空间
/dev/shm是利用内存虚拟出来的磁盘空间，访问速度很快，但是重启后数据会丢失
```

du：查看文件系统磁盘使用量

```txt
-a	列出所有的文件和目录容量，默认只统计目录下面的文件
-h	以易读方式展示文件和目录容量
-s	仅列出总量，不列出每
```







